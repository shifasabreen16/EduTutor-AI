# -*- coding: utf-8 -*-
"""EduTutor AI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HxHXeY2m-BnPY_DFKJzfIENAS7LfAMya
"""

# -*- coding: utf-8 -*-
"""EduTutor.ipynb

Educational AI Assistant - Concept Explainer & Quiz Generator
"""

# ‚úÖ Install required libraries
!pip install transformers torch gradio

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM

# ‚úÖ Load model and tokenizer
# (Make sure this model exists on Hugging Face; otherwise replace with another like "mistralai/Mistral-7B-Instruct-v0.2")
model_name = "ibm-granite/granite-3.2-2b-instruct"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)

# ‚úÖ Fix padding issues
if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

# üîπ Helper: Generate response from LLM
def generate_response(prompt, max_length=512):
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)
    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}

    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,   # controls creativity
            do_sample=True,    # allows variation in responses
            pad_token_id=tokenizer.eos_token_id
        )
    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    response = response.replace(prompt, "").strip()
    return response

# üîπ Feature 1: Concept Explanation
def concept_explanation(concept):
    prompt = f"Explain the concept of {concept} in detail with examples."
    return generate_response(prompt, max_length=1000)

# üîπ Feature 2: Quiz Generator
def quiz_generator(concept):
    prompt = f"Generate 5 quiz questions about {concept} with different question types (multiple choice, true/false, short answer). At the end, provide the answers."
    return generate_response(prompt, max_length=1000)

# ‚úÖ Gradio UI
with gr.Blocks() as app:
    gr.Markdown("## üéì EduTutor - AI Educational Assistant")

    with gr.Tabs():
        # Concept Explanation Tab
        with gr.TabItem("üìò Concept Explanation"):
            concept_input = gr.Textbox(label="Enter a concept", placeholder="e.g., machine learning")
            explain_btn = gr.Button("Explain")
            explanation_output = gr.Textbox(label="Explanation", lines=10)
            explain_btn.click(concept_explanation, inputs=concept_input, outputs=explanation_output)

        # Quiz Generator Tab
        with gr.TabItem("üìù Quiz Generator"):
            quiz_input = gr.Textbox(label="Enter a topic", placeholder="e.g., physics")
            quiz_btn = gr.Button("Generate Quiz")
            quiz_output = gr.Textbox(label="Quiz Questions", lines=15)
            quiz_btn.click(quiz_generator, inputs=quiz_input, outputs=quiz_output)

# ‚úÖ Launch app (share=True gives public link in Colab)
app.launch(share=True)